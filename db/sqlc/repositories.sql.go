// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: repositories.sql

package sqlc

import (
	"context"
)

const createRepository = `-- name: CreateRepository :one
INSERT INTO repositories (
    github_id,
    user_id,
    full_name,
    owner,
    name,
    is_active
) VALUES (
             $1, $2, $3, $4, $5, $6
         )
    RETURNING id, github_id, user_id, full_name, owner, name, is_active, created_at, updated_at
`

type CreateRepositoryParams struct {
	GithubID int64  `json:"github_id"`
	UserID   int64  `json:"user_id"`
	FullName string `json:"full_name"`
	Owner    string `json:"owner"`
	Name     string `json:"name"`
	IsActive *bool  `json:"is_active"`
}

func (q *Queries) CreateRepository(ctx context.Context, arg CreateRepositoryParams) (Repository, error) {
	row := q.db.QueryRow(ctx, createRepository,
		arg.GithubID,
		arg.UserID,
		arg.FullName,
		arg.Owner,
		arg.Name,
		arg.IsActive,
	)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.UserID,
		&i.FullName,
		&i.Owner,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRepository = `-- name: DeleteRepository :exec
DELETE FROM repositories
WHERE id = $1
`

func (q *Queries) DeleteRepository(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRepository, id)
	return err
}

const getRepositoryByFullName = `-- name: GetRepositoryByFullName :one
SELECT id, github_id, user_id, full_name, owner, name, is_active, created_at, updated_at FROM repositories
WHERE full_name = $1
`

func (q *Queries) GetRepositoryByFullName(ctx context.Context, fullName string) (Repository, error) {
	row := q.db.QueryRow(ctx, getRepositoryByFullName, fullName)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.UserID,
		&i.FullName,
		&i.Owner,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRepositoryByGithubID = `-- name: GetRepositoryByGithubID :one
SELECT id, github_id, user_id, full_name, owner, name, is_active, created_at, updated_at FROM repositories
WHERE github_id = $1
`

func (q *Queries) GetRepositoryByGithubID(ctx context.Context, githubID int64) (Repository, error) {
	row := q.db.QueryRow(ctx, getRepositoryByGithubID, githubID)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.UserID,
		&i.FullName,
		&i.Owner,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRepositoryByID = `-- name: GetRepositoryByID :one
SELECT id, github_id, user_id, full_name, owner, name, is_active, created_at, updated_at FROM repositories
WHERE id = $1
`

func (q *Queries) GetRepositoryByID(ctx context.Context, id int64) (Repository, error) {
	row := q.db.QueryRow(ctx, getRepositoryByID, id)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.UserID,
		&i.FullName,
		&i.Owner,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveRepositories = `-- name: ListActiveRepositories :many
SELECT id, github_id, user_id, full_name, owner, name, is_active, created_at, updated_at FROM repositories
WHERE is_active = true
ORDER BY created_at DESC
`

func (q *Queries) ListActiveRepositories(ctx context.Context) ([]Repository, error) {
	rows, err := q.db.Query(ctx, listActiveRepositories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Repository{}
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.GithubID,
			&i.UserID,
			&i.FullName,
			&i.Owner,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepositoriesByUser = `-- name: ListRepositoriesByUser :many
SELECT id, github_id, user_id, full_name, owner, name, is_active, created_at, updated_at FROM repositories
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListRepositoriesByUser(ctx context.Context, userID int64) ([]Repository, error) {
	rows, err := q.db.Query(ctx, listRepositoriesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Repository{}
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.GithubID,
			&i.UserID,
			&i.FullName,
			&i.Owner,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRepositoryStatus = `-- name: UpdateRepositoryStatus :exec
UPDATE repositories
SET
    is_active = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateRepositoryStatusParams struct {
	ID       int64 `json:"id"`
	IsActive *bool `json:"is_active"`
}

func (q *Queries) UpdateRepositoryStatus(ctx context.Context, arg UpdateRepositoryStatusParams) error {
	_, err := q.db.Exec(ctx, updateRepositoryStatus, arg.ID, arg.IsActive)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: pull_requests.sql

package sqlc

import (
	"context"
)

const createPullRequest = `-- name: CreatePullRequest :one
INSERT INTO pull_requests (
    github_id,
    repository_id,
    pr_number,
    title,
    author,
    status,
    base_branch,
    head_branch
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8
         )
    RETURNING id, github_id, repository_id, pr_number, title, author, status, base_branch, head_branch, reviewed_at, created_at, updated_at
`

type CreatePullRequestParams struct {
	GithubID     int64   `json:"github_id"`
	RepositoryID int64   `json:"repository_id"`
	PrNumber     int32   `json:"pr_number"`
	Title        *string `json:"title"`
	Author       *string `json:"author"`
	Status       *string `json:"status"`
	BaseBranch   *string `json:"base_branch"`
	HeadBranch   *string `json:"head_branch"`
}

func (q *Queries) CreatePullRequest(ctx context.Context, arg CreatePullRequestParams) (PullRequest, error) {
	row := q.db.QueryRow(ctx, createPullRequest,
		arg.GithubID,
		arg.RepositoryID,
		arg.PrNumber,
		arg.Title,
		arg.Author,
		arg.Status,
		arg.BaseBranch,
		arg.HeadBranch,
	)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.RepositoryID,
		&i.PrNumber,
		&i.Title,
		&i.Author,
		&i.Status,
		&i.BaseBranch,
		&i.HeadBranch,
		&i.ReviewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePullRequest = `-- name: DeletePullRequest :exec
DELETE FROM pull_requests
WHERE id = $1
`

func (q *Queries) DeletePullRequest(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePullRequest, id)
	return err
}

const getPullRequestByGithubID = `-- name: GetPullRequestByGithubID :one
SELECT id, github_id, repository_id, pr_number, title, author, status, base_branch, head_branch, reviewed_at, created_at, updated_at FROM pull_requests
WHERE github_id = $1
`

func (q *Queries) GetPullRequestByGithubID(ctx context.Context, githubID int64) (PullRequest, error) {
	row := q.db.QueryRow(ctx, getPullRequestByGithubID, githubID)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.RepositoryID,
		&i.PrNumber,
		&i.Title,
		&i.Author,
		&i.Status,
		&i.BaseBranch,
		&i.HeadBranch,
		&i.ReviewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPullRequestByID = `-- name: GetPullRequestByID :one
SELECT id, github_id, repository_id, pr_number, title, author, status, base_branch, head_branch, reviewed_at, created_at, updated_at FROM pull_requests
WHERE id = $1
`

func (q *Queries) GetPullRequestByID(ctx context.Context, id int64) (PullRequest, error) {
	row := q.db.QueryRow(ctx, getPullRequestByID, id)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.RepositoryID,
		&i.PrNumber,
		&i.Title,
		&i.Author,
		&i.Status,
		&i.BaseBranch,
		&i.HeadBranch,
		&i.ReviewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPullRequestByRepoAndNumber = `-- name: GetPullRequestByRepoAndNumber :one
SELECT id, github_id, repository_id, pr_number, title, author, status, base_branch, head_branch, reviewed_at, created_at, updated_at FROM pull_requests
WHERE repository_id = $1 AND pr_number = $2
`

type GetPullRequestByRepoAndNumberParams struct {
	RepositoryID int64 `json:"repository_id"`
	PrNumber     int32 `json:"pr_number"`
}

func (q *Queries) GetPullRequestByRepoAndNumber(ctx context.Context, arg GetPullRequestByRepoAndNumberParams) (PullRequest, error) {
	row := q.db.QueryRow(ctx, getPullRequestByRepoAndNumber, arg.RepositoryID, arg.PrNumber)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.RepositoryID,
		&i.PrNumber,
		&i.Title,
		&i.Author,
		&i.Status,
		&i.BaseBranch,
		&i.HeadBranch,
		&i.ReviewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPullRequestsByRepository = `-- name: ListPullRequestsByRepository :many
SELECT id, github_id, repository_id, pr_number, title, author, status, base_branch, head_branch, reviewed_at, created_at, updated_at FROM pull_requests
WHERE repository_id = $1
ORDER BY created_at DESC
    LIMIT $2 OFFSET $3
`

type ListPullRequestsByRepositoryParams struct {
	RepositoryID int64 `json:"repository_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListPullRequestsByRepository(ctx context.Context, arg ListPullRequestsByRepositoryParams) ([]PullRequest, error) {
	rows, err := q.db.Query(ctx, listPullRequestsByRepository, arg.RepositoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PullRequest{}
	for rows.Next() {
		var i PullRequest
		if err := rows.Scan(
			&i.ID,
			&i.GithubID,
			&i.RepositoryID,
			&i.PrNumber,
			&i.Title,
			&i.Author,
			&i.Status,
			&i.BaseBranch,
			&i.HeadBranch,
			&i.ReviewedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnreviewedPullRequests = `-- name: ListUnreviewedPullRequests :many
SELECT id, github_id, repository_id, pr_number, title, author, status, base_branch, head_branch, reviewed_at, created_at, updated_at FROM pull_requests
WHERE repository_id = $1
  AND status = 'open'
  AND reviewed_at IS NULL
ORDER BY created_at ASC
`

func (q *Queries) ListUnreviewedPullRequests(ctx context.Context, repositoryID int64) ([]PullRequest, error) {
	rows, err := q.db.Query(ctx, listUnreviewedPullRequests, repositoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PullRequest{}
	for rows.Next() {
		var i PullRequest
		if err := rows.Scan(
			&i.ID,
			&i.GithubID,
			&i.RepositoryID,
			&i.PrNumber,
			&i.Title,
			&i.Author,
			&i.Status,
			&i.BaseBranch,
			&i.HeadBranch,
			&i.ReviewedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markPullRequestReviewed = `-- name: MarkPullRequestReviewed :exec
UPDATE pull_requests
SET
    reviewed_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkPullRequestReviewed(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, markPullRequestReviewed, id)
	return err
}

const updatePullRequestStatus = `-- name: UpdatePullRequestStatus :exec
UPDATE pull_requests
SET
    status = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdatePullRequestStatusParams struct {
	ID     int64   `json:"id"`
	Status *string `json:"status"`
}

func (q *Queries) UpdatePullRequestStatus(ctx context.Context, arg UpdatePullRequestStatusParams) error {
	_, err := q.db.Exec(ctx, updatePullRequestStatus, arg.ID, arg.Status)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: review_comments.sql

package sqlc

import (
	"context"
)

const countCommentsByPR = `-- name: CountCommentsByPR :one
SELECT COUNT(*) FROM review_comments
WHERE pr_id = $1
`

func (q *Queries) CountCommentsByPR(ctx context.Context, prID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countCommentsByPR, prID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUnpostedComments = `-- name: CountUnpostedComments :one
SELECT COUNT(*) FROM review_comments
WHERE pr_id = $1 AND posted = false
`

func (q *Queries) CountUnpostedComments(ctx context.Context, prID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countUnpostedComments, prID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createReviewComment = `-- name: CreateReviewComment :one
INSERT INTO review_comments (
    pr_id,
    file_path,
    line_number,
    comment,
    severity
) VALUES (
             $1, $2, $3, $4, $5
         )
    RETURNING id, pr_id, github_comment_id, file_path, line_number, comment, severity, posted, posted_at, created_at
`

type CreateReviewCommentParams struct {
	PrID       int64   `json:"pr_id"`
	FilePath   *string `json:"file_path"`
	LineNumber *int32  `json:"line_number"`
	Comment    string  `json:"comment"`
	Severity   *string `json:"severity"`
}

func (q *Queries) CreateReviewComment(ctx context.Context, arg CreateReviewCommentParams) (ReviewComment, error) {
	row := q.db.QueryRow(ctx, createReviewComment,
		arg.PrID,
		arg.FilePath,
		arg.LineNumber,
		arg.Comment,
		arg.Severity,
	)
	var i ReviewComment
	err := row.Scan(
		&i.ID,
		&i.PrID,
		&i.GithubCommentID,
		&i.FilePath,
		&i.LineNumber,
		&i.Comment,
		&i.Severity,
		&i.Posted,
		&i.PostedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReviewComment = `-- name: DeleteReviewComment :exec
DELETE FROM review_comments
WHERE id = $1
`

func (q *Queries) DeleteReviewComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteReviewComment, id)
	return err
}

const getReviewCommentByID = `-- name: GetReviewCommentByID :one
SELECT id, pr_id, github_comment_id, file_path, line_number, comment, severity, posted, posted_at, created_at FROM review_comments
WHERE id = $1
`

func (q *Queries) GetReviewCommentByID(ctx context.Context, id int64) (ReviewComment, error) {
	row := q.db.QueryRow(ctx, getReviewCommentByID, id)
	var i ReviewComment
	err := row.Scan(
		&i.ID,
		&i.PrID,
		&i.GithubCommentID,
		&i.FilePath,
		&i.LineNumber,
		&i.Comment,
		&i.Severity,
		&i.Posted,
		&i.PostedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listReviewCommentsByPR = `-- name: ListReviewCommentsByPR :many
SELECT id, pr_id, github_comment_id, file_path, line_number, comment, severity, posted, posted_at, created_at FROM review_comments
WHERE pr_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListReviewCommentsByPR(ctx context.Context, prID int64) ([]ReviewComment, error) {
	rows, err := q.db.Query(ctx, listReviewCommentsByPR, prID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReviewComment{}
	for rows.Next() {
		var i ReviewComment
		if err := rows.Scan(
			&i.ID,
			&i.PrID,
			&i.GithubCommentID,
			&i.FilePath,
			&i.LineNumber,
			&i.Comment,
			&i.Severity,
			&i.Posted,
			&i.PostedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnpostedComments = `-- name: ListUnpostedComments :many
SELECT id, pr_id, github_comment_id, file_path, line_number, comment, severity, posted, posted_at, created_at FROM review_comments
WHERE pr_id = $1 AND posted = false
ORDER BY severity DESC, created_at ASC
`

func (q *Queries) ListUnpostedComments(ctx context.Context, prID int64) ([]ReviewComment, error) {
	rows, err := q.db.Query(ctx, listUnpostedComments, prID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReviewComment{}
	for rows.Next() {
		var i ReviewComment
		if err := rows.Scan(
			&i.ID,
			&i.PrID,
			&i.GithubCommentID,
			&i.FilePath,
			&i.LineNumber,
			&i.Comment,
			&i.Severity,
			&i.Posted,
			&i.PostedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markCommentAsPosted = `-- name: MarkCommentAsPosted :exec
UPDATE review_comments
SET
    posted = true,
    posted_at = NOW(),
    github_comment_id = $2
WHERE id = $1
`

type MarkCommentAsPostedParams struct {
	ID              int64  `json:"id"`
	GithubCommentID *int64 `json:"github_comment_id"`
}

func (q *Queries) MarkCommentAsPosted(ctx context.Context, arg MarkCommentAsPostedParams) error {
	_, err := q.db.Exec(ctx, markCommentAsPosted, arg.ID, arg.GithubCommentID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    github_id,
    username,
    email,
    avatar_url,
    access_token
) VALUES (
             $1, $2, $3, $4, $5
         )
    RETURNING id, github_id, username, email, avatar_url, access_token, created_at, updated_at
`

type CreateUserParams struct {
	GithubID    int64   `json:"github_id"`
	Username    string  `json:"username"`
	Email       *string `json:"email"`
	AvatarUrl   *string `json:"avatar_url"`
	AccessToken *string `json:"access_token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.GithubID,
		arg.Username,
		arg.Email,
		arg.AvatarUrl,
		arg.AccessToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByGithubID = `-- name: GetUserByGithubID :one
SELECT id, github_id, username, email, avatar_url, access_token, created_at, updated_at FROM users
WHERE github_id = $1
`

func (q *Queries) GetUserByGithubID(ctx context.Context, githubID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGithubID, githubID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, github_id, username, email, avatar_url, access_token, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, github_id, username, email, avatar_url, access_token, created_at, updated_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, github_id, username, email, avatar_url, access_token, created_at, updated_at FROM users
ORDER BY created_at DESC
    LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.GithubID,
			&i.Username,
			&i.Email,
			&i.AvatarUrl,
			&i.AccessToken,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = $2,
    email = $3,
    avatar_url = $4,
    access_token = $5,
    updated_at = NOW()
WHERE id = $1
    RETURNING id, github_id, username, email, avatar_url, access_token, created_at, updated_at
`

type UpdateUserParams struct {
	ID          int64   `json:"id"`
	Username    string  `json:"username"`
	Email       *string `json:"email"`
	AvatarUrl   *string `json:"avatar_url"`
	AccessToken *string `json:"access_token"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.AvatarUrl,
		arg.AccessToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Email,
		&i.AvatarUrl,
		&i.AccessToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserToken = `-- name: UpdateUserToken :exec
UPDATE users
SET
    access_token = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserTokenParams struct {
	ID          int64   `json:"id"`
	AccessToken *string `json:"access_token"`
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserToken, arg.ID, arg.AccessToken)
	return err
}
